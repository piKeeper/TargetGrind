local player = game.Players.LocalPlayer
local uis = game:GetService("UserInputService")

local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

-- Create ScreenGui
local gui = Instance.new("ScreenGui")
gui.Name = "ToggleGui"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

local function createDraggableButton(name, size, pos, text, bgColor)
	local btn = Instance.new("TextButton")
	btn.Name = name
	btn.Size = size
	btn.Position = pos
	btn.Text = text
	btn.Font = Enum.Font.SourceSansBold
	btn.TextSize = 20
	btn.TextColor3 = Color3.new(1, 1, 1)
	btn.BackgroundColor3 = bgColor
	btn.Parent = gui
	btn.Active = true

	local dragging, dragInput, dragStart, startPos

	local function update(input)
		local delta = input.Position - dragStart
		btn.Position = UDim2.new(
			startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y
		)
	end

	btn.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = btn.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	btn.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	uis.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)

	return btn
end

local toggleBtn = createDraggableButton(
	"ToggleButton",
	UDim2.new(0, 100, 0, 40),
	UDim2.new(0.1, 0, 0.1, 0),
	"OFF",
	Color3.fromRGB(200, 0, 0)
)

local closeBtn = createDraggableButton(
	"CloseButton",
	UDim2.new(0, 60, 0, 40),
	UDim2.new(0.1, 110, 0.1, 0),
	"Close",
	Color3.fromRGB(80, 80, 80)
)

local isOn = false
local loopRunning = false
local activateLoopRunning = false

local function updateToggleButton()
	if isOn then
		toggleBtn.Text = "ON"
		toggleBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
	else
		toggleBtn.Text = "OFF"
		toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
	end
end

local function simulateClick()
	-- Instead of tool:Activate(), fire the ShootButton's MouseButton1Click event
	local blasterGui = player.PlayerGui:FindFirstChild("BlasterTouchGui")
	if blasterGui then
		local buttonsFolder = blasterGui:FindFirstChild("Buttons")
		if buttonsFolder then
			local shootBtn = buttonsFolder:FindFirstChild("ShootButton")
			if shootBtn and shootBtn:IsA("GuiButton") then
				shootBtn.MouseButton1Click:Fire()
			end
		end
	end
end

local function teleportAndClick(box)
	if not hrp or not box or not box.Parent then return end
	local targetHead = box:FindFirstChild("Head")
	if not targetHead then return end

	local originalCFrame = hrp.CFrame
	local targetPos = targetHead.Position + Vector3.new(0, 10, 0)

	-- Preserve original rotation so character stays upright
	local rx, ry, rz = originalCFrame:ToEulerAnglesYXZ()
	hrp.CFrame = CFrame.new(targetPos) * CFrame.Angles(rx, ry, rz)

	activateLoopRunning = true
	while box.Parent and isOn and activateLoopRunning do
		simulateClick()
		task.wait(0.2)
	end
	activateLoopRunning = false
end

local function startTeleportLoop()
	loopRunning = true
	while isOn and loopRunning do
		local boxesFolder = workspace:FindFirstChild("TargetBoxes")
		if boxesFolder then
			for _, box in ipairs(boxesFolder:GetChildren()) do
				if box.Name == "TargetBox" then
					teleportAndClick(box)
					if not isOn then break end
				end
			end
		end
		task.wait(0.5)
	end
end

toggleBtn.MouseButton1Click:Connect(function()
	isOn = not isOn
	updateToggleButton()

	if isOn then
		hrp.Anchored = true
		task.spawn(startTeleportLoop)
	else
		loopRunning = false
		activateLoopRunning = false  -- stops clicking
		hrp.Anchored = false
	end
end)

closeBtn.MouseButton1Click:Connect(function()
	gui:Destroy()
end)

updateToggleButton()
